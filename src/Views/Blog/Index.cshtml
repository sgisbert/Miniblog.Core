@using System.Linq;

@model IAsyncEnumerable<Post>
@inject IOptionsSnapshot<BlogSettings> settings
@{
	int currentPage = int.Parse(ViewContext.RouteData.Values[Constants.page] as string ?? "0");

	int pageCount;
	pageCount = int.TryParse(ViewData[Constants.TotalPostCount].ToString(), out pageCount) ? 0 : pageCount / 2;
}

@section Head {
	@if ((await Model.AnyAsync()) && currentPage < pageCount)
	{
		<link rel="prev" href="@ViewData[Constants.prev]" />
	}
	@if (currentPage > 0)
	{
		<link rel="next" href="@ViewData[Constants.next]" />
	}

	<link rel="stylesheet" href="~/assets/css/pages/blog.css" />
	<link rel="stylesheet" href="~/assets/css/pages/page_magazine.css" />
}

@section Breadcrumbs {
	@if (this.ViewData[Constants.BlogSection] != null)
	{
		<div class="breadcrumbs margin-bottom-20">
			<div class="container">
				<header>
					<h2>@this.ViewData[Constants.BlogSection]</h2>
				</header>
			</div>
		</div>
	}
}
<div class="row blog-page">
	<div class="col-md-9">
		@await foreach (var post in Model)
		{
			await Html.RenderPartialAsync("_Post.cshtml", post);
		}
	</div>
	<div class="col-md-3 magazine-page">
		@{ await Html.RenderPartialAsync("_Sidebar.cshtml"); }
	</div>
</div>

<nav class="pagination container" aria-label="Pagination">
	@if ((await Model.AnyAsync()) && currentPage < pageCount)
	{
		<a rel="prev" href="@ViewData[Constants.prev]" title="Older posts">&laquo; @Miniblog.Core.Texts.Blog.Content.Older</a>
	}
	@if (currentPage > 0)
	{
		<a rel="next" href="@ViewData[Constants.next]" title="Newer posts">@Miniblog.Core.Texts.Blog.Content.Newer &raquo;</a>
	}
	<br /><br />
</nav>
